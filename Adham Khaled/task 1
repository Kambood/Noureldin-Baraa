problem 1
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {

int n;
   
    scanf("%d", &n);
    if(n>1000 || n<1)
    {
        printf("number invalid");
        return 0;
    }

    int *arr = (int *)malloc(n * sizeof(int)); 

    if (arr == NULL) {
        printf("Memory allocation failed.\n");
        return 1; 
    }

    
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
        if(arr[i]>1000 || arr[i]<1)
    {
        printf("number invalid");
        return 0;
    }
    }

    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }

    printf("%d\n", sum);

    free(arr); 

        
    return 0;
}


problem 2
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>



int main() 
{
    int a, b;
    scanf("%d\n%d", &a, &b);
    if(a<1 || a>pow(10,6))
    {
        printf("error");
        return 0;
    }
    if(b<1 || b>pow(10,6))
    {
        printf("error");
        return 0;
    }
      // Complete the code.
      for(int i = a;i <= b; i++)
     {
      if(i <= 9)
      {
          switch(i)
          {
              case 1:
              printf("one\n");
              break;
              case 2:
              printf("two\n");
              break;
              case 3:
              printf("three\n");
              break;
              case 4:
              printf("four\n");
              break;
              case 5:
              printf("five\n");
              break;
              case 6:
              printf("six\n");
              break;
              case 7:
              printf("seven\n");
              break;
              case 8:
              printf("eight\n");
              break;
              case 9:
              printf("nine\n");
              break;
              }
      }
              else if(i>9 && i%2==0)
              printf("even\n");
              else if(i>9 && i%2!=0)
              printf("odd\n");
      }

    return 0;
}

problem 3

#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>




int main()
{
    int n; 
    scanf("%d", &n);
    if(n < 1 || n > pow(10,9))
    {
        printf("error");
        return 0;
    }
if(n >= 1 && n <= 9)
{
    switch(n)
    {
        case 1:
        printf("one");
        break;
        
        case 2:
        printf("two");
        break;
        
        case 3:
        printf("three");
        break;
        
        case 4:
        printf("four");
        break;
        
        case 5:
        printf("five");
        break;
        
        case 6:
        printf("six");
        break;
        
        case 7:
        printf("seven");
        break;
        
        case 8:
        printf("eight");
        break;
        
        case 9:
        printf("nine");
        break;
    }
}
    else {
    printf("Greater than 9");
}
   

    return 0;
}

problem 4
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int num, *arr, i;
    scanf("%d", &num);
    arr = (int*) malloc(num * sizeof(int));
    for(i = 0; i < num; i++) {
        scanf("%d", arr + i);
    }


    /* Write the logic to reverse the array. */
int temp;
    for(i = 0; i < num/2; i++)
     {
      temp=arr[i];
      arr[i] = arr[num - 1 -i];
      arr[num -1 -i]=temp;
     }
     for(i=0;i<num;i++)
     {
         printf("%d ",arr[i]);
     }
     return 0;
}
problem 5

#include <stdio.h>
/*
Add `int max_of_four(int a, int b, int c, int d)` here.
*/
int max_of_four(int a, int b, int c, int d)
{
    int max = a;
    if(b > max)
    max = b;
    if (c > max)
    max = c;
    if (d > max)
    max =d;
    return max;
}
int main() {
    int a, b, c, d;
    scanf("%d %d %d %d", &a, &b, &c, &d);
    int ans = max_of_four(a, b, c, d);
    printf("%d", ans);
    
    return 0;
}

